#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Демонстрация работы системы семантического поиска
"""

from core.search_engine import SearchEngine
from core.text_processor import TextProcessor


def add_sample_documents(search_engine: SearchEngine):
    """Добавление примеров документов для демонстрации"""
    
    documents = [
        {
            "title": "Искусственный интеллект и машинное обучение",
            "content": """
            Искусственный интеллект (ИИ) — это область компьютерных наук, которая занимается созданием 
            интеллектуальных машин, способных выполнять задачи, обычно требующие человеческого интеллекта. 
            Машинное обучение является подразделом ИИ, которое фокусируется на разработке алгоритмов, 
            способных учиться и принимать решения на основе данных.
            
            Основные типы машинного обучения включают обучение с учителем, обучение без учителя 
            и обучение с подкреплением. Нейронные сети являются одним из самых популярных подходов 
            в современном машинном обучении.
            """
        },
        {
            "title": "Python программирование",
            "content": """
            Python — это высокоуровневый язык программирования общего назначения. Он был создан 
            Гвидо ван Россумом и впервые выпущен в 1991 году. Python известен своим простым и 
            читаемым синтаксисом, что делает его отличным выбором для начинающих программистов.
            
            Python широко используется в веб-разработке, анализе данных, искусственном интеллекте, 
            научных вычислениях и автоматизации. Популярные фреймворки включают Django, Flask, 
            NumPy, Pandas и TensorFlow.
            """
        },
        {
            "title": "Базы данных SQL и NoSQL",
            "content": """
            База данных — это организованная коллекция данных, которая хранится и доступна 
            электронным способом. Существуют два основных типа баз данных: реляционные (SQL) 
            и нереляционные (NoSQL).
            
            SQL базы данных используют структурированный язык запросов и следуют реляционной 
            модели данных. Примеры включают MySQL, PostgreSQL и SQLite. NoSQL базы данных 
            предлагают более гибкую схему и включают документные (MongoDB), ключ-значение 
            (Redis), колоночные (Cassandra) и графовые (Neo4j) базы данных.
            """
        },
        {
            "title": "Алгоритмы сортировки",
            "content": """
            Алгоритм сортировки — это алгоритм, который упорядочивает элементы списка в 
            определенном порядке. Наиболее распространенными являются сортировка по возрастанию 
            или убыванию числовых значений или лексикографическом порядке строк.
            
            Популярные алгоритмы сортировки включают пузырьковую сортировку, быструю сортировку, 
            сортировку слиянием и пирамидальную сортировку. Каждый алгоритм имеет свои 
            преимущества и недостатки в зависимости от размера данных и требований к производительности.
            """
        },
        {
            "title": "Веб-разработка с React",
            "content": """
            React — это JavaScript библиотека для создания пользовательских интерфейсов, 
            разработанная Facebook. React позволяет создавать интерактивные веб-приложения 
            с использованием компонентной архитектуры.
            
            Основные концепции React включают компоненты, состояние (state), свойства (props) 
            и виртуальный DOM. React часто используется вместе с другими библиотеками и 
            инструментами, такими как Redux для управления состоянием и Webpack для сборки.
            """
        },
        {
            "title": "Анализ данных и статистика",
            "content": """
            Анализ данных — это процесс исследования, очистки, преобразования и моделирования 
            данных с целью обнаружения полезной информации, заключений и поддержки принятия решений.
            
            Статистика играет ключевую роль в анализе данных, предоставляя методы для сбора, 
            анализа, интерпретации и представления данных. Популярные инструменты для анализа 
            данных включают Python с библиотеками Pandas и NumPy, R, SQL и специализированные 
            платформы как Tableau и Power BI.
            """
        }
    ]
    
    print("Добавление документов в поисковую систему...")
    for doc in documents:
        doc_id = search_engine.add_document(
            title=doc["title"],
            content=doc["content"]
        )
        print(f"✓ Добавлен документ: {doc['title']} (ID: {doc_id})")
    
    print(f"\nВсего документов в системе: {search_engine.get_stats()['total_documents']}\n")


def demo_search(search_engine: SearchEngine):
    """Демонстрация поиска"""
    
    test_queries = [
        "искусственный интеллект",
        "Python программирование",
        "базы данных",
        "алгоритмы сортировки",
        "веб-разработка React",
        "анализ данных статистика",
        "машинное обучение нейронные сети",
        "JavaScript библиотеки"
    ]
    
    print("=== ДЕМОНСТРАЦИЯ ПОИСКА ===\n")
    
    for i, query in enumerate(test_queries, 1):
        print(f"{i}. Запрос: '{query}'")
        print("-" * 60)
        
        # Выполняем поиск
        results = search_engine.search(query, top_k=3, min_score=0.01)
        
        if results:
            for j, result in enumerate(results, 1):
                print(f"   {j}. {result.document.title}")
                print(f"      Релевантность: {result.score:.4f}")
                print(f"      Ключевые слова: {', '.join(result.matched_keywords)}")
                print(f"      Фрагмент: {result.snippet[:100]}...")
                print()
        else:
            print("   Результаты не найдены")
        
        print()


def demo_advanced_features(search_engine: SearchEngine):
    """Демонстрация дополнительных возможностей"""
    
    print("=== ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ ===\n")
    
    # Поиск по заголовку
    print("1. Поиск по заголовку:")
    title_results = search_engine.search_by_title("Python")
    for doc in title_results:
        print(f"   - {doc.title}")
    print()
    
    # Получение ключевых слов документа
    print("2. Ключевые слова первого документа:")
    all_docs = search_engine.document_manager.get_all_documents()
    if all_docs:
        first_doc = all_docs[0]
        keywords = search_engine.get_document_keywords(first_doc.doc_id, top_k=5)
        for word, weight in keywords:
            print(f"   - {word}: {weight:.4f}")
    print()
    
    # Статистика системы
    print("3. Статистика системы:")
    stats = search_engine.get_stats()
    print(f"   - Всего документов: {stats['documents']['total_documents']}")
    print(f"   - Уникальных слов: {stats['index']['unique_words']}")
    print(f"   - Среднее слов в документе: {stats['index']['average_words_per_document']:.1f}")


def main():
    """Основная функция демонстрации"""
    
    print("=== СИСТЕМА СЕМАНТИЧЕСКОГО ПОИСКА ===\n")
    
    # Создаем поисковую систему
    search_engine = SearchEngine()
    
    # Добавляем примеры документов
    add_sample_documents(search_engine)
    
    # Демонстрируем поиск
    demo_search(search_engine)
    
    # Демонстрируем дополнительные возможности
    demo_advanced_features(search_engine)
    
    print("=== ДЕМОНСТРАЦИЯ ЗАВЕРШЕНА ===")


if __name__ == "__main__":
    main()
