АРХИТЕКТУРА СИСТЕМЫ СЕМАНТИЧЕСКОГО ПОИСКА
============================================

┌─────────────────────────────────────────────────────────────────┐
│                        ПОЛЬЗОВАТЕЛЬ                            │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                    ПОИСКОВЫЙ ЗАПРОС                            │
│                  "искусственный интеллект"                     │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                   SearchEngine                                  │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │ search(query, top_k, min_score)                         │   │
│  │ - Обработка запроса                                     │   │
│  │ - Поиск в индексе                                       │   │
│  │ - Ранжирование результатов                              │   │
│  │ - Генерация фрагментов                                  │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                TextProcessor                                    │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │ preprocess_text(query)                                  │   │
│  │ 1. Приведение к нижнему регистру                        │   │
│  │ 2. Удаление лишних символов                             │   │
│  │ 3. Удаление стоп-слов                                   │   │
│  │ 4. Стемминг                                             │   │
│  │ 5. Фильтрация коротких слов                             │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                DocumentIndex                                    │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │ search(query_vector)                                    │   │
│  │ - Инвертированный индекс                                │   │
│  │ - Прямой индекс                                         │   │
│  │ - TF-IDF вычисления                                     │   │
│  │ - Косинусное сходство                                   │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                DocumentManager                                  │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │ - Хранение документов                                   │   │
│  │ - Метаданные                                            │   │
│  │ - JSON сериализация                                     │   │
│  │ - Поиск по заголовку                                    │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                    РЕЗУЛЬТАТЫ ПОИСКА                           │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │ SearchResult:                                           │   │
│  │ - document: Document                                    │   │
│  │ - score: float (релевантность)                          │   │
│  │ - matched_keywords: List[str]                           │   │
│  │ - snippet: str (фрагмент)                               │   │
│  └─────────────────────────────────────────────────────────┘   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                        ПОЛЬЗОВАТЕЛЬ                            │
│                   Получает результаты                          │
└─────────────────────────────────────────────────────────────────┘

ДЕТАЛИЗАЦИЯ КОМПОНЕНТОВ:
=======================

1. SearchEngine (core/search_engine.py)
   - Основной интерфейс системы
   - Координирует работу всех компонентов
   - Генерирует фрагменты результатов

2. TextProcessor (core/text_processor.py)
   - Обработка текста без внешних зависимостей
   - Стемминг русских слов
   - Удаление стоп-слов

3. DocumentIndex (core/document_indexer.py)
   - Инвертированный индекс: слово → {doc_id: tf}
   - Прямой индекс: doc_id → {слово: tf}
   - TF-IDF вычисления
   - Косинусное сходство

4. DocumentManager (utils/document_manager.py)
   - Управление документами
   - JSON сериализация
   - Метаданные документов

5. Document (utils/document_manager.py)
   - Представление документа
   - ID, заголовок, содержимое
   - Обработанное содержимое

ПОТОК ДАННЫХ:
=============

1. Пользователь вводит запрос
2. SearchEngine получает запрос
3. TextProcessor обрабатывает запрос
4. DocumentIndex выполняет поиск
5. DocumentManager предоставляет документы
6. SearchEngine ранжирует результаты
7. Пользователь получает результаты

АЛГОРИТМ TF-IDF:
===============

TF (Term Frequency):
  tf(t,d) = count(t,d) / |d|

IDF (Inverse Document Frequency):
  idf(t) = log(|D| / |{d ∈ D : t ∈ d}|)

TF-IDF:
  tf-idf(t,d) = tf(t,d) × idf(t)

Косинусное сходство:
  cos(q,d) = (q · d) / (||q|| × ||d||)

ПРЕИМУЩЕСТВА АРХИТЕКТУРЫ:
=========================

✓ Модульность - каждый компонент решает свою задачу
✓ Расширяемость - легко добавлять новые функции
✓ Производительность - индексация для быстрого поиска
✓ Точность - TF-IDF обеспечивает хорошее ранжирование
✓ Простота - только стандартные библиотеки Python

